@page
@model SimulationModel
@{
    ViewData["Title"] = "Symulacja";
    var currentTurn = Model.CurrentTurn;
    var turnLogs = Model.TurnLogs;
    var symbols = turnLogs[currentTurn].Symbols;
    var infoText = turnLogs[currentTurn].InfoText;

    // Mapowanie symboli do nazw plików obrazów
    var symbolToImageMap = new Dictionary<char, string>
    {
        { 'X', "combo-80.png" },
        { 'B', "eagle-80.png" },
        { 'E', "elf-80.png" },
        { 'b', "emu-80.png" },
        { 'O', "ork-80.png" },
        { 'A', "rabbit-80.png" }
    };
}

<!-- Struktura strony -->
<div class="container d-flex flex-column justify-content-center align-items-center mt-3 text-center">
    <div class="turn-navigation d-flex justify-content-center align-items-center mb-4">
        <a class="btn btn-secondary me-2" asp-page="./Simulation" asp-route-turn="@(currentTurn - 1)" disabled="@(currentTurn == 0)">
            ←
        </a>
        <h2 class="mb-0 mx-2">Tura @currentTurn</h2>
        <a class="btn btn-secondary ms-2" asp-page="./Simulation" asp-route-turn="@(currentTurn + 1)" disabled="@(currentTurn == turnLogs.Count - 1)">
            →
        </a>
    </div>

    <!-- Mapa -->
    <div class="map-container">
        <!-- Wiersze -->
        @for (int y = Model.MapSizeY - 1; y >= 0; y--)
        {
            <div class="map-row">
                <div class="axis-number">@y</div>
                @for (int x = 0; x < Model.MapSizeX; x++)
                {
                    var symbol = symbols.TryGetValue(new Simulator.Point(x, y), out var foundSymbol) ? foundSymbol : ' ';
                    <div class="cell">
                        @if (symbolToImageMap.ContainsKey(symbol))
                        {
                            <img src="/images/@symbolToImageMap[symbol]" alt="@symbol" class="map-image" />
                        }
                        else
                        {
                            <span>@Html.Raw(symbol)</span>
                        }
                    </div>
                }
            </div>
        }

        <!-- Numery po X-ie -->
        <div class="axis-row">
            <div class="cell-empty"></div>
            @for (int x = 0; x < Model.MapSizeX; x++)
            {
                <div class="axis-number">@x</div>
            }
        </div>
    </div>

    <div class="turn-info mt-4">
        <p>@infoText</p>
    </div>
</div>

<!-- Stopka -->
<footer class="footer">
    <div class="footer-content">
        ©2025 Wojciech Pich
    </div>
</footer>

<!-- Lokalny CSS -->
<style>
    .map-container {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        margin-top: 20px;
        gap: 2px;
    }

    .axis-row, .map-row {
        display: flex;
    }

    .cell {
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        font-weight: bold;
        background-color: #a6f0a6; /* Jasnozielony kolor */
        border: 1px solid #ccc;
        width: 75px;
        height: 75px;
    }

    .axis-number {
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.9rem;
        font-weight: bold;
        width: 75px;
        height: 75px;
        margin: 0;
        padding: 0;
        color: #333;
    }

    .cell-empty {
        width: 75px;
        height: 75px;
        margin: 0;
        padding: 0;
    }

    .map-image {
        width: 70px;
        height: 70px;
        object-fit: contain;
    }

    .turn-info {
        font-weight: bold;
        color: #333;
        margin-top: 20px;
        text-align: center;
    }

    .turn-navigation h2 {
        font-size: 1.8rem;
        margin: 0 10px;
    }

    .turn-navigation a {
        font-size: 1.5rem;
        padding: 5px 15px;
    }
</style>
